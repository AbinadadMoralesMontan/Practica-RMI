/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import Interfaces.IPersona;
import Interfaces.IPersonaController;
import Cliente.RMI;
import java.rmi.RemoteException;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class PanelVerPersonas extends javax.swing.JPanel {
    private static String ID = "ID";
    private static String NOMBRE = "Nombre";
    private static String TELEFONO = "Teléfono";
    private static String EMAIL = "Email";
    /**
     * Creates new form paneVerPersona
     */
    public PanelVerPersonas() {
        initComponents();
        refrescarTabla();
    }
    
    public void refrescarTabla(){
        try {
            Vector<Vector> datos = new Vector<>();
            
            List<IPersona> listPersonas;
            String texto = BuscarTextField.getText();
            
            if(texto.length()==0){
                listPersonas = RMI.getIPersonaController().list();
            }else{
                IPersona persona= RMI.getIPersonaController().newInstance();
                String columna = columnasComboBox.getSelectedItem().toString();
                
                if(columna.compareTo(ID)==0){
                    try{
                        persona.setId(Integer.parseInt(texto));
                    }catch(NumberFormatException ex){
                        JOptionPane.showMessageDialog(this, "Se requiere un valor numerico","Número requerido", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }else if(columna.compareTo(NOMBRE)==0){
                    persona.setNombre(texto);
                }else if(columna.compareTo(TELEFONO)==0){
                    persona.setTelefono(texto);
                }else if(columna.compareTo(EMAIL)==0){
                    persona.setEmail(texto);
                }
                
                listPersonas = RMI.getIPersonaController().find(persona);
            }
            for(IPersona persona : listPersonas){
                Vector registro =  new Vector();
                registro.add(persona.getId());
                registro.add(persona.getNombre());
                registro.add(persona.getTelefono());
                registro.add(persona.getEmail());
                
                datos.add(registro);
            }
            Vector<String>columnas = new Vector<>();
            columnas.add("ID");
            columnas.add("Nombre");
            columnas.add("Teléfono");
            columnas.add("Email");
            
            personasTable.setModel(new DefaultTableModel(datos, columnas));
        } catch (RemoteException ex) {
            Logger.getLogger(PanelVerPersonas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        personasTable = new javax.swing.JTable();
        columnasComboBox = new javax.swing.JComboBox<>();
        BuscarTextField = new javax.swing.JTextField();
        buscarButton = new javax.swing.JButton();
        eliminarButton = new javax.swing.JButton();
        modificarButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        personasTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(personasTable);

        columnasComboBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        columnasComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "Nombre", "Teléfono", "Email" }));

        BuscarTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        buscarButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        buscarButton.setText("Buscar");
        buscarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarButtonActionPerformed(evt);
            }
        });

        eliminarButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        eliminarButton.setText("Eliminar");
        eliminarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarButtonActionPerformed(evt);
            }
        });

        modificarButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        modificarButton.setText("Modificar");
        modificarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarButtonActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton3.setText("Agregar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(columnasComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BuscarTextField)
                        .addGap(18, 18, 18)
                        .addComponent(buscarButton)
                        .addGap(52, 52, 52))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(modificarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eliminarButton)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(columnasComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BuscarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarButton))
                .addGap(49, 49, 49)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(modificarButton)
                        .addComponent(eliminarButton)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buscarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarButtonActionPerformed
        refrescarTabla();
    }//GEN-LAST:event_buscarButtonActionPerformed

    private void modificarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarButtonActionPerformed
        try {
            int filaSeleccionada = personasTable.getSelectedRow();
            if(filaSeleccionada==1){
                return;
            }
            
            int idPersona = (Integer) personasTable.getValueAt(filaSeleccionada, 0);
            IPersona persona = RMI.getIPersonaController().findOne(idPersona);
            
            if(persona.getId()==0){
                JOptionPane.showMessageDialog(this,"Persona no encontrada" ,"Es probable que la persona haya sido eliminada con anterioridad", JOptionPane.ERROR_MESSAGE);
                refrescarTabla();
                return;
            }
            
            DialogModificarPersona dialogModificarPersona = new DialogModificarPersona(null, true, persona);
            dialogModificarPersona.setLocationRelativeTo(this);
            dialogModificarPersona.setVisible(true);
            
            //Refrescar tabla
            refrescarTabla();
            
        } catch (RemoteException ex) {
            Logger.getLogger(PanelVerPersonas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_modificarButtonActionPerformed

    private void eliminarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarButtonActionPerformed
        try {
            int filaSeleccionada = personasTable.getSelectedRow();
            if(filaSeleccionada==1){
                return;
            }
            
            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Esta seguro de elimnar a la persona?"+
                    "\n ¿Desea continuar?","Eliminar persona",JOptionPane.YES_NO_OPTION);
            
            if(confirmacion!=JOptionPane.YES_OPTION){
                return;
            }
            
            int idPersona = (Integer) personasTable.getValueAt(filaSeleccionada, 0);
            int respuesta = RMI.getIPersonaController().delete(idPersona);
            
            if(respuesta == IPersonaController.DELETE_EXITO){
                JOptionPane.showMessageDialog(this,"Persona eliminada con éxito" ,"Operación éxitosa", JOptionPane.INFORMATION_MESSAGE);
                refrescarTabla();
            }else if(respuesta==IPersonaController.DELETE_ID_INEXISTENTE){
                JOptionPane.showMessageDialog(this,"Persona no encontrada" ,"No se pudo eliminar la persona", JOptionPane.ERROR_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(this,"Operación incompleta" ,"No fue posible el eliminar la persona", JOptionPane.ERROR_MESSAGE);
            }
        } catch (RemoteException ex) {
            Logger.getLogger(PanelVerPersonas.class.getName()).log(Level.SEVERE, null, ex);
        }
        
            
    }//GEN-LAST:event_eliminarButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        DialogAregarPersona dialogoAgregarPersona = new DialogAregarPersona(null, true);
        dialogoAgregarPersona.setLocationRelativeTo(this);
        dialogoAgregarPersona.setVisible(true);
        refrescarTabla();
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BuscarTextField;
    private javax.swing.JButton buscarButton;
    private javax.swing.JComboBox<String> columnasComboBox;
    private javax.swing.JButton eliminarButton;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modificarButton;
    private javax.swing.JTable personasTable;
    // End of variables declaration//GEN-END:variables
}
